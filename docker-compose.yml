version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic transaction_created --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic transaction_updated --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic transaction_deleted --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic user_created --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic user_updated --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic user_deleted --partitions 1 --replication-factor 1 &&
        echo 'Kafka topics created successfully!'
      "

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: transactions
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  main-app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=transactions
      - PORT=3000
    ports:
      - "3000:3000"

  transactions:
    build:
      context: ./services/transactions
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:29092
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=transactions
    ports:
      - "3001:3001"

  python-analytics:
    build:
      context: ./services/python-analytics
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BROKERS=kafka:29092
      - PYTHONUNBUFFERED=1
    ports:
      - "3002:3002"

  users:
    build:
      context: .
      dockerfile: apps/users/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:29092
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=transactions
    ports:
      - "3003:3003"

volumes:
  postgres_data:
